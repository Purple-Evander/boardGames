
Kovai.co task insights:

////////////// commons between Tango and Sudoku ////////////////
const initialBoard: string[][];

const [board, setBoard] = useState<string[][]>(initialBoard);
const [isWin, setIsWin] = useState(false);

const resetBoard();
const handleCellClick(rowIdx,colIdx);  -> switch 3 game rules for sudoku | Tango
const checkWinCondition=():boolean={....};
use effect (()=>{...},[board,violations]);

const violations:[number,number][]=[];
const addVilations(row,col);

return(
    {left column} -> flip rules image for Sudoku | Tango
    {right column}
        return(....{cell==='...} -> edit for game inputs
        ); 
)






/////////////// Tango Exclusive //////////////////     |    /////////////// Sudoku Exclusives /////////////////
const constraintPairs: string[][];                     |    const L1,R1,L2,R2,L3,R3 : number[][];  -> region
                                                       |
const moreThanTwo();                                   |    const findRegion(); ->helper function
const checkAdjacencyConstraints();                     |    const checkRegionDuplicates();
const checkEqualSunsAndMoons();                        |    
                                                       |    const checkRowColDuplicates();
const renderConstraints();                             |
                                                       

























/*
'use client';

import React, {useState, useEffect} from 'react';
import {values, moreThanTwo, resetViolations, violations, checkAdjacencyConstraints, checkEqualSunsAndMoons,initialBoard, constraintPairs, renderConstraints} from './tangoData'; //importing all game logic functions for tango
//import {initialBoard, constraintPairs} from './boardData';

//const values = ['_','S','M']; //states: empty(_), Sun(S), Moon(M)

const Board=()=>{
    //initialize board state with given above given initial board data
    const [board, setBoard]= useState<string[][]>(initialBoard);
    const [isWin, setIsWin] = useState(false);  // To track if the player has won

    const game= 'Tango'; //Tango game and 2 is sudoku


    // Function to handle the reset action (clear the board)
    const resetBoard = () => {
      setBoard(initialBoard); // Reset the board state to the initialBoard
      resetViolations(); // Clear any violations
      setIsWin(false); //reset win state
    };


    //to cycle through Sun(S), Moon(M), Empty(_) states from values[] upon cell click
  const handleCellClick=(rowIdx:number, colIdx:number)=>{
    //allow only state toggling for empty cells('') in initialBoard
    if(initialBoard[rowIdx][colIdx]==='_'){

      //new copy of board by mapping over current board  
      const updatedBoard = board.map((row, rIdx)=>
        row.map((cell,cIdx)=>{
          if(rIdx===rowIdx && cIdx===colIdx){
            const currentIndex=values.indexOf(cell); //gets the current state value of cell
            return values[(currentIndex +1)% values.length]; //cycles to next state values
          }
          return cell; //keep other cells unchanged
        })
      );
  
      resetViolations(); //clears previos violations
      checkAdjacencyConstraints(updatedBoard,constraintPairs) // checks violation for contraint cell pairs
      moreThanTwo(updatedBoard); //checks for violations(more than two consecutive cells)
      checkEqualSunsAndMoons(updatedBoard); //checks the row-fill and column-fill violations
      setBoard(updatedBoard); //updating the board state
    }
    
  };


  ////////////////////// WIN CONDITION///////////// 
  // Check if the player has won (all rows and columns are filled without violations)
  const checkWinCondition = (): boolean => {
    const allFilled = board.every(row => row.every(cell => cell !== '_'));  // Check if all cells are filled
    const noViolations = violations.length === 0;  // Check if there are no violations
    return allFilled && noViolations;
  };

  // Effect to check win condition after every move
  useEffect(() => {
    if (checkWinCondition()) {
      setIsWin(true);  // Set win state to true when player wins
      setTimeout(() => {
        setIsWin(false);  // Reset win state after 25 seconds
      }, 25000);
    }
  }, [board, violations]);  // Check win condition whenever board or violations change


 

  return ( 
    <div className="min-h-screen bg-gray-100 flex">

      {/* Left Column: WebP Image, Rules Image, and Reset Button */}
      <div className="w-1/2 flex flex-col justify-start items-center p-4 space-y-4">       
        
        
        {/* Left Image */}
        {isWin?(
          <img
          src="/win.webp"
          alt="Celebration GIF"
          className="p-5 rounded-lg shadow-lg" 
          style={{marginLeft:'100px', width:'700px', maxWidth:'700px'}} // Adjust size as needed
        />
        ):(
          <img
            src="/tango-rules.png"
            alt="Game Rules"
            className="p-5 rounded-lg shadow-lg"
            style={{
              marginLeft:'100px',
              marginTop: '150px',
              width: '700px',
              maxWidth: 'none',
            }}
          />
        )} 

        {/* Reset Button */}
        <button
          onClick={resetBoard}
          style={{
            marginLeft:'150px',
            marginTop:'50px',
            padding: '10px 20px',
            backgroundColor: '#4CAF50',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            fontSize: '16px',
          }} 
        >
          Reset Board
        </button>
      </div>
  
      {/* Right Column: Game Board */}
      <div className="w-1/2 flex flex-col justify-start items-center p-8">
        <div className="relative p-8 bg-white rounded-lg shadow-lg">
          {/* Render the 6x6 board */}
          <div style={{ display: 'flex', flexDirection: 'column' }}>
            {board.map((row, rowIdx) => (
              <div key={rowIdx} style={{ display: 'flex' }}>
                {row.map((cell, colIdx) => {
                  const isViolation = violations.some(
                    ([vRow, vCol]) => vRow === rowIdx && vCol === colIdx
                  );

                  const immutableCell = initialBoard[rowIdx][colIdx]!='_'; //check if the cell is mutable or not
  
                  return (
                    <div
                      key={colIdx}
                      onClick={() => handleCellClick(rowIdx, colIdx)}
                      style={{
                        width: '90px',
                        height: '90px',
                        border: '2px solid #e0e0e0',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        cursor: immutableCell? 'not-allowed': 'pointer', // cursor set to not-allowed when clicked on immutable cells
                        backgroundColor: isViolation ? '#ffcccc' : '#f9f9f9',
                        animation: isWin?'blink-green 0.5s step-start infinite' : '', //apply blinking when won
                      }}
                    >
                      {cell === 'S' && <img src="/sun-icon.png" alt="Sun" className="w-12 h-12" />}
                      {cell === 'M' && <img src="/moon-icon.png" alt="Moon" className="w-12 h-12" />}
                      {cell === '_' && <span className="text-gray-500 text-3xl">..</span>}
                      {cell === '1' && <span className="text-gray-500 text-lg">1</span>}
                      {cell === '2' && <span className="text-gray-500 text-lg">2</span>}
                      {cell === '3' && <span className="text-gray-500 text-lg">3</span>}
                      {cell === '4' && <span className="text-gray-500 text-lg">4</span>}
                      {cell === '5' && <span className="text-gray-500 text-lg">5</span>}
                      {cell === '6' && <span className="text-gray-500 text-lg">6</span>}
                      
                    </div>
                  );
                })}
              </div>
            ))}
          </div>               

          
          {/* Render constraint signs for right and bottom cells */}
          {game==='Tango' && renderConstraints(constraintPairs)}
          
        </div>
      </div>
    </div>
  );
  
  
};

// Add blinking animation via CSS
const style = document.createElement('style');
style.innerHTML = `
  @keyframes blink-green {
    60% { background-color: #8CBA80; }
  }
`;
document.head.appendChild(style);
    
export default Board;
*/