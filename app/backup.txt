file structure:

app/
  board/
    page.tsx
  gameData/
    gameExporter.ts
    sudokuData.ts
    tangoData.ts
  layout.tsx
  page.tsx

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app/board/page.tsx:

  'use client';

import React, {useState, useEffect} from 'react';
//import {gameExclusiveData, values, resetViolations, violations, initialBoard, gameRules, renderCellContent, boardOverlay, boardCellColor } from './tangoData'; //importing all game logic functions for tango
//import {gameExclusiveData, values, resetViolations, violations, initialBoard, gameRules, renderCellContent, boardOverlay, boardCellColor} from './sudokuData';
import games from '../gameData/gameExporter';
//import {initialBoard, constraintPairs} from './boardData';

//const values = ['_','S','M']; //states: empty(_), Sun(S), Moon(M)

const Board=()=>{
  
  
  //game switcher
  const [currentGameIndex, setCurrentGameIndex]=useState(1);
  const currentGame = games[currentGameIndex];
  const nextGame=()=>{
    setCurrentGameIndex((prevIndex)=>(prevIndex + 1)% games.length);
  };
  useEffect(()=>{
    setBoard(currentGame.initialBoard);  //updates the initialBoard data when game is switeched
    resetViolations();  //violations are cleared
    setIsWin(false);   //win state is set to false at start of game
    // Ensure that the game rules are updated each time the game changes
    if (currentGame.gameRules) {
      currentGame.gameRules(currentGame.initialBoard); // Apply new game rules
    }
  },[currentGame]);

  //basic setter
  const initialBoard= currentGame.initialBoard;
  const values = currentGame.values;
  
  //initialize board state with given above given initial board data
  const [board, setBoard] = useState<string[][]>(initialBoard);
  const [isWin, setIsWin] = useState(false);  // To track if the player has won

  
  const game= currentGame.gameExclusiveData.gameName; //fetch name to pick correct rules images

  // Function to handle the reset action (clear the board)
  const resetBoard = () => {
    setBoard(initialBoard); // Reset the board state to the initialBoard
    resetViolations(); // Clear any violations
    setIsWin(false); //reset win state
  }; //check the function like resetViolations(), resetViolations(), boardOverlay(), boardCellColor()

  //to cycle through Sun(S), Moon(M), Empty(_) states from values[] upon cell click
  const handleCellClick=(rowIdx:number, colIdx:number)=>{
    //allow only state toggling for empty cells('') in initialBoard
    if(initialBoard[rowIdx][colIdx]==='_'){

      //new copy of board by mapping over current board  
      const updatedBoard = board.map((row, rIdx)=>
        row.map((cell,cIdx)=>{
          if(rIdx===rowIdx && cIdx===colIdx){
            const currentIndex=values.indexOf(cell); //gets the current state value of cell
            return values[(currentIndex +1)% values.length]; //cycles to next state values
          }
          return cell; //keep other cells unchanged
        })
      );
  
      resetViolations(); //clears previos violations

      currentGame.gameRules(updatedBoard);// gets the necessary game rules function
      // checkRowColDuplicatess(updatedBoard);
      // checkRegionDuplicatess(updatedBoard);

      //checkAdjacencyConstraints(updatedBoard,constraintPairs) // checks violation for contraint cell pairs
      //moreThanTwo(updatedBoard); //checks for violations(more than two consecutive cells)
      //checkEqualSunsAndMoons(updatedBoard); //checks the row-fill and column-fill violations
      setBoard(updatedBoard); //updating the board state
    }
    
  };


  ////////////////////// WIN CONDITION///////////// 
  // Check if the player has won (all rows and columns are filled without violations)
  const checkWinCondition = (): boolean => {
    const allFilled = board.every(row => row.every(cell => cell !== '_'));  // Check if all cells are filled
    const noViolations = violations.length === 0;  // Check if there are no violations
    return allFilled && noViolations;
  };
  // Effect to check win condition after every move
  useEffect(() => {
    if (checkWinCondition()) {
      setIsWin(true);  // Set win state to true when player wins
      setTimeout(() => {
        setIsWin(false);  // Reset win state after 25 seconds
      }, 25000);
    }
  }, [board, violations]);  // Check win condition whenever board or violations change


 

 

  return ( 
    <div className="min-h-screen bg-gray-100 flex">

      {/* Left Column: WebP Image, Rules Image, and Reset Button */}
      <div className="w-1/2 flex flex-col justify-start items-center p-4 space-y-4">       
        
        
        {/* Left Image */}
        {isWin?(
          <img
          src="/win.webp"
          alt="Celebration GIF"
          className="p-5 rounded-lg shadow-lg" 
          style={{marginLeft:'100px', width:'550px', maxWidth:'550px'}} // Adjust size as needed
        />
        ):(
          <> 
          <h1 className="text-4xl font-semibold text-center text-gray-700 mt-4 mb-4" style={{marginTop:'50px', marginBottom:'-100px', marginLeft:'50px'}}>{game} Rules</h1>
          <img
            src= {`/${game}-rules.png`}   // "/tango-rules.png" | `/${game}-rules.png`
            alt="Game Rules"
            className="p-5 rounded-lg shadow-lg"
            style={{
              marginLeft:'100px',
              marginTop: '150px',
              width: '700px',
              maxWidth: 'none',
            }}
          />
          </>
        )} 

        {/* Reset Button */}
        <button
          onClick={resetBoard}
          style={{
            marginLeft:'80px',
            marginTop:'50px',
            padding: '10px 20px',
            backgroundColor: '#4CAF50',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            fontSize: '16px',
          }} 
        >
          Reset Board
        </button>
        {/* Switch Game Button */}
        <button
          onClick={nextGame}
          style={{
            marginTop: '20px',
            padding: '10px 20px',
            fontSize: '16px',
            cursor: 'pointer',
            borderRadius: '5px',
            backgroundColor: '#4CAF50',
            color: 'white',
            border: 'none',
          }}
        >
          Next Game
        </button>
      </div>
  
      {/* Right Column: Game Board */}
      <div className="w-1/2 flex flex-col justify-start items-center p-8">
        <div className="relative p-8 bg-white rounded-lg shadow-lg">
          {/* Render the 6x6 board */}
          <div style={{ display: 'flex', flexDirection: 'column' }}>
            {board.map((row, rowIdx) => (
              <div key={rowIdx} style={{ display: 'flex' }}>
                {row.map((cell, colIdx) => {
                  const isViolation = violations.some(
                    ([vRow, vCol]) => vRow === rowIdx && vCol === colIdx
                  );

                  
                  //const cellBGColor= isViolation? '#ffcccc' : '#f9f9f9';// default color or violation color
                  const cellBGColor= '#f9f9f9';
                  const immutableCell = initialBoard[rowIdx][colIdx]!=='_'; //check if the cell is mutable or not
  
                  return (
                    <div
                      key={colIdx}
                      onClick={() => handleCellClick(rowIdx, colIdx)}
                      style={{
                        width: '90px',
                        height: '90px',
                        border: '2px solid #e0e0e0',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        cursor: immutableCell? 'not-allowed': 'pointer', // cursor set to not-allowed when clicked on immutable cells
                        backgroundColor: isViolation?'#ffcccc': currentGame.boardCellColor(rowIdx,colIdx)?.backgroundColor || cellBGColor,//currentGame.boardCellColor(rowIdx,colIdx)?.backgroundColor || cellBGColor,
                        animation: isWin?'blink-green 0.5s step-start infinite' : '', //apply blinking when won
                      }}
                      
                    >

                      {
                        currentGame.boardOverlay() // to add elements over the board
                      }

                      {currentGame.renderCellContent(cell)/* Render cell values by using a function */}
                      
                    </div>

                  ); 
                })}
              </div>
            ))}
          </div>               

          {/* Render board overlay elements */}
          
          
          
        </div>
      </div>
    </div>
  );

  
  
  
};



// blinking animation CSS
const style = document.createElement('style');
style.innerHTML = `
  @keyframes blink-green {
    60% { background-color: #8CBA80; }
  }
`;
document.head.appendChild(style);
    
export default Board;

/*

app(folder)
  board(folder)
    page.tsx
    sudokuData.ts
    tangoData.ts
  globals.css
  layout.tsx
  page.tsx

*/


///board functions
    //shared array of violating cells
    export const violations:[number,number][]=[];

    //reset the global violation array before checking violation to ensure to only highligh current issues
    export const resetViolations=()=>{
      violations.length=0; //clears the array
    }
  
    //helper to avoid duplicates
    export const addViolation=(row:number, col:number)=>{
      const exists = violations.some(([vRow,vCol])=> vRow===row && vCol===col);
      if(!exists){
        violations.push([row,col]);
      }
    };



////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app/gameData/gameExporter.ts:

import * as sudoku from './sudokuData';
//import {gameExclusiveData, values, resetViolations, violations, initialBoard, gameRules, renderCellContent, boardOverlay, boardCellColor} from './sudokuData';

import * as tango from './tangoData';
// Import more games here as needed

// Add all games to an array
const games = [tango, sudoku];

export default games;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app/layout.tsx

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app/page.tsx
import Board from "./board/page";

export default function Home() {
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center">
      <div>
        <h1 className="text-5xl font-semibold text-center text-gray-700 mt-4 mb-4">Board Game</h1>
        <Board/>
      </div>
    </div>
  );
}  


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app/gameData/sudokuData.ts
import React from 'react';

import {violations, addViolation, resetViolations} from '../board/page';

export const gameName = 'Sudoku';


export const initialBoards: string[][] = [
    ['_', '5', '_', '_', '_', '1'],
    ['_', '_', '4', '6', '_', '_'],
    ['4', '_', '_', '_', '5', '_'],
    ['1', '_', '_', '_', '_', '4'],
    ['_', '4', '3', '_', '_', '_'],
    ['_', '6', '_', '2', '4', '_'],
];

export const initialBoard: string[][] = [
        ['6', '5', '2', '4', '3', '1'],
        ['3', '1', '4', '6', '2', '5'],
        ['4', '3', '6', '1', '5', '2'],
        ['1', '2', '5', '3', '6', '4'],
        ['2', '4', '3', '5', '_', '6'],
        ['_', '6', '1', '2', '4', '3'],
    ];

//regions
const L1:[number,number][]=[[0,0],[0,1],[0,2], 
                            [1,0],[1,1],[1,2]];
const R1:[number,number][]=[[0,3],[0,4],[0,5], 
                            [1,3],[1,4],[1,5]];

const L2:[number,number][]=[[2,0],[2,1],[2,2], 
                            [3,0],[3,1],[3,2]];
const R2:[number,number][]=[[2,3],[2,4],[2,5],
                            [3,3],[3,4],[3,5]];

const L3:[number,number][]=[[4,0],[4,1],[4,2],
                            [5,0],[5,1],[5,2]];
const R3:[number,number][]=[[4,3],[4,4],[4,5],
                            [5,3],[5,4],[5,5]];

const regionSet = [L1,R1,L2,R2,L3,R3]; // Array<Array<Array<number>>> 

export const values=['_','1','2','3','4','5','6']; //states: empty(_) and numbers from 1 to 6

//shared array of violating cells
//export const violations:[number,number][]=[];

//reset the global violation array before checking violation to ensure to only highligh current issues
// export const resetViolations=()=>{
//     violations.length=0; //clears the array
// }

//helper to avoid duplicates
// const addViolation=(row:number, col:number)=>{
//     const exists = violations.some(([vRow,vCol])=> vRow===row && vCol===col);
//     if(!exists){
//         violations.push([row,col]);
//     }
// };


// export const checkRowColDuplicates=(board:string[][]):void=>{
//     const tempSet: Set<string> = new Set();

//     //check duplicates in current row
//     for(let i=0; i<6; i++){
//         //ignoring the current cell number
//         if(i!==colIdx){
//             tempSet.add(board[rowIdx][i]);
//         }
//     }
//     if(tempSet.has(board[rowIdx][colIdx])){ //duplicate check
//         console.log(`${board[rowIdx][colIdx]} already exists in row ${rowIdx}`);
//         addViolation(rowIdx,colIdx); //add to violations array
//     }

//     //check duplicates in current column
//     tempSet.clear(); //clears the data for column 
//     for(let i=0; i<6; i++){
//         //ignoring the current cell number
//         if(i!==rowIdx){
//             tempSet.add(board[i][colIdx]);
//         }
//     }
//     if(tempSet.has(board[rowIdx][colIdx])){ //duplicate check
//         console.log(`${board[rowIdx][colIdx]} already exists in column ${colIdx}`);
//         addViolation(rowIdx,colIdx); //add to violations array
//     }
// }




//helper to detect the play region and the cell coordinates
const findRegionSet=(rowIdx:number,colIdx:number)=>{
    if(rowIdx==0 || rowIdx==1){
        if(colIdx==0 || colIdx==1 || colIdx==2){
            return L1;
        }else{
            return R1;
        }
    }
    if(rowIdx==2 || rowIdx==3){
        if(colIdx==0 || colIdx==1 || colIdx==2){
            return L2;
        }else{
            return R2;
        }
    }
    if(rowIdx==4 || rowIdx==5){
        if(colIdx==0 || colIdx==1 || colIdx==2){
            return L3;
        }else{
            return R3;
        }
    }
}; //only 10 operations to detect from 6 regions on worst case scenario


// export const checkRegionDuplicates=(board:string[][])=>{
//     let regionSet= findRegionSet(rowIdx,colIdx);
//     const tempSet: Set<string> = new Set();//set to store distinct numbers

//     let currentNumber = board[rowIdx][colIdx];//store the current number in a variable for comparison
//     board[rowIdx][colIdx]='_';//empty the current cell to prevent current number added to temp set

//     for(const [rowR, colR] of regionSet){
//         tempSet.add(board[rowR][colR]);
//     };
//     //console.log("Region set is : ", tempSet);

//     if(tempSet.has(currentNumber)){
//         console.log(`${currentNumber} already exists in region set: `, tempSet);
//         addViolation(rowIdx,colIdx)
//     }else{
//         console.log(`No duplicates in region set: `, tempSet);
//     }

//     board[rowIdx][colIdx]=currentNumber;//restore current number back to cell
// } 


//export const renderRegions(){};



// const checkRowColDuplicatess = (board: string[][]): void => {
//   for (let rowIdx = 0; rowIdx < 6; rowIdx++) {
//     for (let colIdx = 0; colIdx < 6; colIdx++) {
//       if (board[rowIdx][colIdx] !== '_') { // Skip empty cells
//         const currentValue = board[rowIdx][colIdx];
//         const tempSet: Set<string> = new Set();
//         //const tempSetCol: Set<string> = new Set();
      
//         // Check duplicates in the current row
//         for (let i = 0; i < 6; i++) {
//           if (i !== colIdx && board[rowIdx][i] !== '_') {
//             if (tempSet.has(board[rowIdx][i])) {
//               console.log(`${board[rowIdx][colIdx]} already exists in row ${rowIdx}`);
//               addViolation(rowIdx, colIdx); // Mark violation for duplicate in the row
//             }
//             tempSet.add(board[rowIdx][i]);
//           }
//         }
              
//         // Check duplicates in the current column
//         tempSet.clear();
//         for (let i = 0; i < 6; i++) {
//           if (i !== rowIdx && board[i][colIdx] !== '_') {
//             if (tempSet.has(board[i][colIdx])) {
//               console.log(`${board[rowIdx][colIdx]} already exists in column ${colIdx}`);
//               addViolation(rowIdx, colIdx); // Mark violation for duplicate in the column
//             }
//             tempSet.add(board[i][colIdx]);
//           }
//         }
//       }
//     }
//   }
// };

const checkRowColDuplicatess = (board: string[][]): void => {
  console.log(violations);
  for (let rowIdx = 0; rowIdx < 6; rowIdx++) {
    for (let colIdx = 0; colIdx < 6; colIdx++) {
      if (board[rowIdx][colIdx] !== '_') { // Skip empty cells
        const currentValue = board[rowIdx][colIdx];

        // Check duplicates in the current row
        for (let i = 0; i < 6; i++) {
          if (i !== colIdx && board[rowIdx][i] !== '_') {
            if (board[rowIdx][i] === currentValue) {
              console.log(`${currentValue} already exists in row ${rowIdx}`);
              addViolation(rowIdx, colIdx); // Mark violation for duplicate in the row
            }
          }
        }

        // Check duplicates in the current column
        for (let i = 0; i < 6; i++) {
          if (i !== rowIdx && board[i][colIdx] !== '_') {
            if (board[i][colIdx] === currentValue) {
              console.log(`${currentValue} already exists in column ${colIdx}`);
              addViolation(rowIdx, colIdx); // Mark violation for duplicate in the column
            }
          }
        }
      }
    }
  }
  console.log(violations);
};




const checkRegionDuplicatess = (board: string[][]): void => {
        regionSet.forEach((region) => {
          const tempSet: Set<string> = new Set();
      
          region.forEach(([rowIdx, colIdx]) => {
            const value = board[rowIdx][colIdx];
            if (value !== '_') {
              if (tempSet.has(value)) {
                addViolation(rowIdx, colIdx); // Mark violation for duplicate in the region
              }
              tempSet.add(value);
            }
          });
        });
};
      
    
export const gameRules=(board:string[][]):void=>{    
    checkRowColDuplicatess(board);
    checkRegionDuplicatess(board);
};

export const renderCellContent = (cell: string): React.ReactNode => {
  const elements:{[key: string]:()=>React.ReactNode} = {
    _: () => React.createElement('span', { className: 'text-gray-500 text-lg' }, '..'),
    1: () => React.createElement('span', { className: 'text-gray-500 text-3xl' }, '1'),
    2: () => React.createElement('span', { className: 'text-gray-500 text-3xl' }, '2'),
    3: () => React.createElement('span', { className: 'text-gray-500 text-3xl' }, '3'),
    4: () => React.createElement('span', { className: 'text-gray-500 text-3xl' }, '4'),
    5: () => React.createElement('span', { className: 'text-gray-500 text-3xl' }, '5'),
    6: () => React.createElement('span', { className: 'text-gray-500 text-3xl' }, '6'),

  };

  return elements[cell]?.() || null;
};

//<span className="text-gray-500 text-3xl">1</span>

export const gameExclusiveData={
  gameName, regionSet
};



const darkRegion = (rowIdx: number, colIdx: number) => {
  const isDarkRegion = L1.some(([dRow, dCol]) => dRow === rowIdx && dCol === colIdx) ||
                       R2.some(([dRow, dCol]) => dRow === rowIdx && dCol === colIdx) ||
                       L3.some(([dRow, dCol]) => dRow === rowIdx && dCol === colIdx);

  if (isDarkRegion) {
    // Return inline styles if it's a dark region
    return {
      backgroundColor: 'rgba(0, 0, 0, 0.08)', // Darker background for the dark region
    };
  }

  // Return null if it's not a dark region, meaning no styles are applied
  return null;
};



export const boardCellColor=(rowIdx:number, colIdx:number)=>{
  return darkRegion(rowIdx, colIdx);
};

export const boardOverlay=()=>{
  return null;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app/gameData/tangoData

import React from 'react';
import {violations, addViolation, resetViolations } from '../board/page';

export const gameName = 'Tango';

// Initial 6x6 board configuration (assumes no violations at the start)
export const initialBoardS: string[][] = [
    ['_', '_', '_', '_', '_', '_'],
    ['_', '_', 'S', 'S', '_', 'S'],
    ['_', 'S', 'M', '_', 'M', 'S'],
    ['_', '_', '_', '_', '_', '_'],
    ['_', 'M', 'M', '_', 'S', '_'],
    ['_', '_', '_', '_', '_', '_'],
  ];

export const initialBoard: string[][] = [
    ['S', 'S', 'M', 'M', 'S', 'M'],
    ['M', 'M', 'S', 'S', 'M', 'S'],
    ['M', 'S', 'M', 'S', 'M', 'S'],
    ['S', 'M', 'S', 'M', 'S', '_'],
    ['_', 'M', 'M', 'S', 'S', 'M'],
    ['_', 'S', 'S', 'M', 'M', 'S'],
  ];
  

 // List of constrained adjacent cell pairs with their relationships ('=' or '*')
export const constraintPairs: string[][] = [
    ['=', '=', '_', '_', '_', '_'],
    ['_', '_', '_', '_', '_', '_'],
    ['_', '_', '_', '_', '_', '_'],
    ['_', '_', '_', '_', '*', '*'],
    ['_', '_', '_', '=', '=', '_'],
    ['_', '_', '_', '_', '_', '_'],
  ];


  

export const values=['_','S','M']; //states: empty(_), Sun(S), Moon(M)

// //shared array of violating cells
// export const violations:[number,number][]=[];

// //reset the global violation array before checking violation to ensure to only highligh current issues
// export const resetViolations=()=>{
//     violations.length=0; //clears the array
// }

// //helper to avoid duplicates
// const addViolation=(row:number, col:number)=>{
//     const exists = violations.some(([vRow,vCol])=> vRow===row && vCol===col);
//     if(!exists){
//         violations.push([row,col]);
//     }
// };



/////////////////////   MORE THAN TWO   /////////////////////////////////////
const moreThanTwo = (board: string[][]): void =>{
    //checking the rows for more than two sequential sun or moon
    board.forEach((row,rowIdx)=>{
        let count=1; //track the consequtive accurence count
        for(let colIdx = 1; colIdx< row.length; colIdx++){
            //checks for only sun and moon, but ignoriing empty(_)
            if(row[colIdx]===row[colIdx -1] && row[colIdx] !== '_'){
                count++;
                if(count>2){
                    addViolation(rowIdx,colIdx);
                    //violations.push([rowIdx, colIdx]); //violating cell
                    console.log(`more than 2 in row violation: (${rowIdx}, ${colIdx})`, JSON.stringify(violations));
                }
            }else{
                count=1; //reseting the count to break the sequence
            }
        }
    });
    //checking the column for more than two sequential sun or moon
    for(let colIdx=0; colIdx < board[0].length; colIdx++){
        let count=1; //track the consequtive accurence count
        for(let rowIdx = 1; rowIdx < board.length; rowIdx++){
            //checks for only sun and moon, but ignoring empty(_)
            if(board[rowIdx][colIdx]===board[rowIdx-1][colIdx] && board[rowIdx][colIdx]!== '_'){
                count++;
                if(count>2){
                    addViolation(rowIdx,colIdx);
                    //violations.push([rowIdx,colIdx]); //violationg cell
                    console.log(`more than 2 in column violation : (${rowIdx}, ${colIdx})`, JSON.stringify(violations));
                }
            }else{
                count=1; //reseting the count to break the sequence
            }
        }
    }

    //returns void
};



/////////////////////   CONSTRAINT PAIRS   /////////////////////////////////////
const checkAdjacentCells=(currentCell:string, adjacentCell:string, sign:string): boolean => {
    if(currentCell=='_' || adjacentCell=='_'){
        return false; 
    }else if(sign === '=' ){
        return currentCell !== adjacentCell; //both must be same
    }else if(sign === '*'){
        return currentCell === adjacentCell; //both must be different
    }
    return false;        
}

const checkAdjacencyConstraints =(board:string[][], constraintPairs:string[][]): void =>{
    for(let rowIdx=0; rowIdx<board.length; rowIdx++){
        for(let colIdx=0; colIdx<board[rowIdx].length; colIdx++){
            //get the state value in current cell stored in currentCell
            const currentCell = board[rowIdx][colIdx];

            //check right-neighborCell (row, col +1)
            if(colIdx < board[rowIdx].length-1){
                //get the constraint sign in right-neighborCell to c2 and currentCell constraint sign in c1
                const c1= constraintPairs[rowIdx][colIdx];
                const c2 = constraintPairs[rowIdx][colIdx +1];
                //ensure '_' is not considered as constrain sign 
                //both cell's constraint sign must be same, to call them a constraint cell pair
                //pass the parameters to checkAdjacentcells() 
                if((c1 !== '_' || c2 !=='_') && (c1===c2) && checkAdjacentCells(currentCell, board[rowIdx][colIdx+1], c2)){
                    addViolation(rowIdx,colIdx);
                    addViolation(rowIdx,colIdx +1);
                    //violations.push([rowIdx,colIdx]);
                    //violations.push([rowIdx,colIdx +1]);
                    console.log(`right adjacent constraint pair violation: (${rowIdx},${colIdx}, with ${constraintPairs[rowIdx][colIdx]}) and (${rowIdx},${colIdx+1}, with ${constraintPairs[rowIdx][colIdx+1]}) for sign "${c2}"`, JSON.stringify(violations));
                }
            }

            //check bottom-neighborCell (row +1, col)
            if(rowIdx < board.length-1){
                const c1 = constraintPairs[rowIdx][colIdx];
                const c2 = constraintPairs[rowIdx +1][colIdx];
                if((c1 !== '_' || c2 !=='_') && (c1===c2) && checkAdjacentCells(currentCell, board[rowIdx+1][colIdx], c2)){
                    addViolation(rowIdx,colIdx);
                    addViolation(rowIdx+1,colIdx);
                    console.log(`bottom adjacent constraint pair violation: (${rowIdx},${colIdx}, with ${constraintPairs[rowIdx][colIdx]}) and (${rowIdx+1},${colIdx}, with ${constraintPairs[rowIdx+1][colIdx]}) for sign "${c2}"`, JSON.stringify(violations));
                }
            }
        }
    }
};

 


/////////////////////   INVALID ROW-COLUMN FILL   /////////////////////////////////////


const checkEqualSunsAndMoons = (board:string[][]):void=>{
    //checking the rows for violations
    for(let rowIdx=0; rowIdx < board.length; rowIdx++){
        let sunCount=0, moonCount=0;

        //count suns and moons in current row
        board[rowIdx].forEach(cell=>{
            if(cell==='S') sunCount++;
            if(cell==='M') moonCount++;
        });

        if(sunCount>3 || moonCount>3){
            board[rowIdx].forEach((cell,colIdx)=>{
                //push cells that violates the row fill rule
                if(cell==='S' || cell==='M'){
                    violations.push([rowIdx,colIdx]); //adding the violating cells one by one in the row
                    console.log(`Row fill violation on row: ${rowIdx+1}`);
                }
            });
        }
    }

    //checking the columns for violations
    for(let colIdx=0; colIdx < board[0].length; colIdx++){
        let sunCount = 0, moonCount = 0;

        //count the suns and moons in current column
        for(let rowIdx=0; rowIdx < board.length; rowIdx++){
            if(board[rowIdx][colIdx]==='S') sunCount++;
            if(board[rowIdx][colIdx]==='M') moonCount++;
        }

        if(sunCount>3 || moonCount>3){
            for(let rowIdx=0; rowIdx<board.length; rowIdx++){
                //push cells that violates column fill rule
                if(board[rowIdx][colIdx]==='S' || board[rowIdx][colIdx]==='M'){
                    violations.push([rowIdx,colIdx]); //adding violating cell one by one in the column
                    console.log(`Row fill violation on column: ${colIdx+1}`);                
                }
            }
        }
    }
};



//////////////////////// RENDER CONSTRAINTS  //////////////////////////////
/*

npm install --save-dev @types/react @types/react-dom typescript

*/
// Define the type for a single row of constraints
type ConstraintRow = string[];
type ConstraintPairs = ConstraintRow[];


// Function to render constraints
export const renderConstraints = (constraintPairs: ConstraintPairs): React.ReactElement[] => {
    return constraintPairs.flatMap((row, rowIdx) =>
        row.flatMap((constraint, colIdx) => {
          if (constraint === '_') return null;
  
          const elements: React.ReactElement[] = [];
  
          // Right constraint
          if (colIdx < row.length - 1 && constraint === constraintPairs[rowIdx][colIdx + 1]) {
            elements.push(
              React.createElement(
                'div',
                {
                  key: `right-${rowIdx}-${colIdx}`,
                  style: {
                    position: 'absolute',
                    top: `${rowIdx * 90 + 62}px`,
                    left: `${colIdx * 90 + 115}px`,
                    fontSize: '1.5rem',
                    fontWeight: 'bold',
                    color: '#4d5382',
                  },
                },
                constraint === '*' ? 'x' : '='
              )
            );
          }
  
          // Bottom constraint
          if (rowIdx < constraintPairs.length - 1 && constraint === constraintPairs[rowIdx + 1][colIdx]) {
            elements.push(
              React.createElement(
                'div',
                {
                  key: `bottom-${rowIdx}-${colIdx}`,
                  style: {
                    position: 'absolute',
                    top: `${(rowIdx + 1) * 90 + 15}px`,
                    left: `${colIdx * 90 + 70}px`,
                    fontSize: '1.5rem',
                    fontWeight: 'bold',
                    color: '#4d5382',
                  },
                },
                constraint === '*' ? 'x' : '='
              )
            );
          }
  
          return elements;
        })
      )
      .filter((element): element is React.ReactElement => element !== null); // Filter out null values
  };



export const gameRules=(board:string[][]):void=>{
  checkAdjacencyConstraints(board,constraintPairs);
  moreThanTwo(board);
  checkEqualSunsAndMoons(board);

};


// Function to render the content of a cell based on its value
export const renderCellContent = (cell: string): React.ReactNode => {
  const elements:{[key: string]:()=>React.ReactNode} = {
    _: () => React.createElement('span', { className: 'text-gray-500 text-3xl' }, '..'),
    S: () => React.createElement('img', { src: '/sun-icon.png', alt: 'Sun', className: 'w-12 h-12' }),
    M: () => React.createElement('img', { src: '/moon-icon.png', alt: 'Moon', className: 'w-12 h-12' }),
  };

  return elements[cell]?.() || null;
};




/*
{cell === 'S' && <img src="/sun-icon.png" alt="Sun" className="w-12 h-12" />}
{cell === 'M' && <img src="/moon-icon.png" alt="Moon" className="w-12 h-12" />}
{cell === '_' && <span className="text-gray-500 text-3xl">..</span>}
{cell === '1' && <span className="text-gray-500 text-3xl">1</span>}
{cell === '2' && <span className="text-gray-500 text-3xl">2</span>}
{cell === '3' && <span className="text-gray-500 text-3xl">3</span>}
{cell === '4' && <span className="text-gray-500 text-3xl">4</span>}
{cell === '5' && <span className="text-gray-500 text-3xl">5</span>}
{cell === '6' && <span className="text-gray-500 text-3xl">6</span>}

*/

export const gameExclusiveData={
  gameName, constraintPairs,
};

export const boardOverlay=()=>{
  return renderConstraints(constraintPairs);
};
export const boardCellColor=(rowIdx:number, colIdx:number)=>{
  return null;
};